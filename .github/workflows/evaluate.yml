name: Evaluate Model
on:
  workflow_run:
    workflows: ["Tests"]
    types: [completed]

jobs:
  evaluate:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        lfs: true

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        sudo apt-get install -y git-lfs
        git lfs install
        pip install -r requirements.txt
        pip install transformers torch scikit-learn

    - name: Run enhanced evaluation
      run: |
        python -c "
        import json
        import torch
        import numpy as np
        from sklearn.metrics import classification_report
        from transformers import AutoModelForSequenceClassification, AutoTokenizer

        # Configuration
        model_dir = './saved_models'
        test_cases = [
            ('Super produit !', 1),
            ('Tr√®s d√©√ßu', 0),
            ('Je recommande', 1),
            ('Mauvaise qualit√©', 0),
            ('Excellent rapport qualit√©-prix', 1),
            ('Pas terrible', 0),
            ('Incroyable !', 1),
            ('D√©ception totale', 0)
        ]

        # Chargement avec v√©rification
        print('\nüîç Chargement du mod√®le...')
        tokenizer = AutoTokenizer.from_pretrained(model_dir)
        model = AutoModelForSequenceClassification.from_pretrained(
            model_dir,
            local_files_only=True
        )
        model.eval()

        # √âvaluation am√©lior√©e
        print('\nüß™ D√©but de l\'√©valuation...')
        all_preds = []
        all_labels = []
        
        for text, expected in test_cases:
            inputs = tokenizer(text, return_tensors='pt', truncation=True, max_length=512)
            with torch.no_grad():
                outputs = model(**inputs)
            predicted = torch.argmax(outputs.logits).item()
            
            all_preds.append(predicted)
            all_labels.append(expected)

        # M√©triques compl√®tes
        report = classification_report(all_labels, all_preds, target_names=['negative', 'positive'])
        accuracy = np.mean(np.array(all_labels) == np.array(all_preds))
        
        print('\nüìä Rapport complet:')
        print(report)
        print(f'\n‚úÖ Accuracy: {accuracy:.1%}')

        # Sauvegarde des r√©sultats
        with open('metrics.json', 'w') as f:
            json.dump({
                'accuracy': accuracy,
                'classification_report': report,
                'predictions': list(zip([t[0] for t in test_cases], all_labels, all_preds))
            }, f, indent=2)

        if accuracy < 0.85:
            print('\n‚ùå Validation failed: Model accuracy below 85%')
            exit(1)
        "

    - name: Upload metrics
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: model-metrics
        path: metrics.json