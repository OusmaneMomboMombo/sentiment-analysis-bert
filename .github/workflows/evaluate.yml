name: Evaluate Model
on:
  workflow_run:
    workflows: ["Tests"]
    types: [completed]

jobs:
  evaluate:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install safetensors transformers torch

    - name: Run evaluation
      run: |
        python -c "
        import json
        import torch
        from transformers import AutoModelForSequenceClassification, AutoTokenizer

        # Configuration
        model_dir = './saved_models'
        test_cases = [
            ('Super produit !', 1),
            ('Très déçu', 0),
            ('Je recommande', 1),
            ('Mauvaise qualité', 0),
            ('Excellent rapport qualité-prix', 1)
        ]

        # Chargement simplifié
        tokenizer = AutoTokenizer.from_pretrained(model_dir)
        model = AutoModelForSequenceClassification.from_pretrained(model_dir)
        model.eval()

        # Évaluation
        correct = 0
        for text, expected in test_cases:
            inputs = tokenizer(text, return_tensors='pt', truncation=True, padding=True)
            with torch.no_grad():
                outputs = model(**inputs)
            predicted = torch.argmax(outputs.logits).item()
            if predicted == expected:
                correct += 1

        accuracy = correct / len(test_cases)
        with open('metrics.json', 'w') as f:
            json.dump({'accuracy': accuracy, 'tested_samples': len(test_cases)}, f)
        
        assert accuracy >= 0.85, f'Accuracy {accuracy:.1%} < 85%'
        "

    - name: Upload metrics
      uses: actions/upload-artifact@v4
      with:
        name: model-metrics
        path: metrics.json