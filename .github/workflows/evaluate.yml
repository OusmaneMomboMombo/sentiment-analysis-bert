name: Evaluate Model
on:
  workflow_run:
    workflows: ["Tests"]
    types: [completed]

jobs:
  evaluate:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        lfs: true

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        sudo apt-get install -y git-lfs
        git lfs install
        pip install -r requirements.txt
        pip install transformers torch

    - name: Run evaluation
      run: |
        python -c "
        import json
        import torch
        from transformers import AutoModelForSequenceClassification, AutoTokenizer

        # Configuration
        model_dir = './saved_models'
        test_cases = [
            ('Super produit !', 1),
            ('Tr√®s d√©√ßu', 0),
            ('Je recommande', 1),
            ('Mauvaise qualit√©', 0),
            ('Excellent rapport qualit√©-prix', 1),
            ('Pas terrible', 0),
            ('Incroyable !', 1),
            ('D√©ception totale', 0)
        ]  # Ajout de plus d'exemples pour meilleure √©valuation

        # Chargement du mod√®le
        tokenizer = AutoTokenizer.from_pretrained(model_dir)
        model = AutoModelForSequenceClassification.from_pretrained(
            model_dir,
            local_files_only=True
        )
        model.eval()

        # √âvaluation
        correct = 0
        results = []
        for text, expected in test_cases:
            inputs = tokenizer(text, return_tensors='pt', truncation=True, max_length=512)
            with torch.no_grad():
                outputs = model(**inputs)
            predicted = torch.argmax(outputs.logits).item()
            is_correct = predicted == expected
            correct += is_correct
            results.append({
                'text': text,
                'expected': expected,
                'predicted': predicted,
                'correct': is_correct
            })

        accuracy = correct / len(test_cases)
        print(f'\nüìä R√©sultats d√©taill√©s:')
        for r in results:
            print(f"Text: {r['text']} | Expected: {r['expected']} | Predicted: {r['predicted']} | {'‚úÖ' if r['correct'] else '‚ùå'}")
        
        print(f'\n‚úÖ Accuracy globale: {accuracy:.1%}')
        
        with open('metrics.json', 'w') as f:
            json.dump({
                'accuracy': accuracy,
                'tested_samples': len(test_cases),
                'details': results
            }, f, indent=2)
        
        if accuracy < 0.85:
            print('\n‚ùå Le mod√®le a besoin de plus de training!')
            exit(1)  # √âchec du workflow
        "
    
    - name: Upload metrics
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: model-metrics
        path: metrics.json