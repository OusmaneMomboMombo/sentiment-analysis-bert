name: Model Training and Testing
on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        lfs: true

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        sudo apt-get install -y git-lfs
        git lfs install
        pip install -r requirements.txt
        pip install transformers torch scikit-learn

    - name: Train and evaluate model
      run: |
        python -c "
        import torch
        from transformers import BertForSequenceClassification, BertTokenizer
        from torch.utils.data import Dataset, DataLoader
        from sklearn.metrics import accuracy_score
        import numpy as np

        # 1. Préparation des données
        texts = ['Super produit !', 'Très déçu', 'Je recommande', 'Mauvaise qualité',
                'Excellent rapport qualité-prix', 'Pas terrible', 'Incroyable !', 'Déception totale']
        labels = [1, 0, 1, 0, 1, 0, 1, 0]  # 1=positif, 0=négatif

        # 2. Chargement du modèle et tokenizer
        model = BertForSequenceClassification.from_pretrained('bert-base-uncased', num_labels=2)
        tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')

        # 3. Tokenization
        inputs = tokenizer(texts, padding=True, truncation=True, return_tensors='pt')
        
        # 4. Entraînement simplifié (transfer learning)
        model.train()
        optimizer = torch.optim.AdamW(model.parameters(), lr=2e-5)
        
        for epoch in range(3):  # 3 epochs
            outputs = model(**inputs, labels=torch.tensor(labels))
            loss = outputs.loss
            loss.backward()
            optimizer.step()
            optimizer.zero_grad()
            print(f'Epoch {epoch+1}, Loss: {loss.item()}')

        # 5. Évaluation
        model.eval()
        with torch.no_grad():
            outputs = model(**inputs)
        
        preds = np.argmax(outputs.logits.numpy(), axis=1)
        accuracy = accuracy_score(labels, preds)
        print(f'\n✅ Accuracy: {accuracy:.1%}')

        if accuracy < 0.85:
            print('\n❌ Le modèle nécessite plus d\'entraînement')
            exit(1)
        "

    - name: Upload results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: training-results
        path: training_logs.txt